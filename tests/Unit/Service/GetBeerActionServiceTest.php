<?php

namespace App\Tests\Unit\Service;

use App\Http\DTO\Request\GetBeerRequest;
use App\Service\GetBeerActionService;
use PHPUnit\Framework\TestCase;
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class GetBeerActionServiceTest extends TestCase
{
    private const BASE_ENDPOINT = 'https://api.punkapi.com';
    private const CURRENT_PUNK_ENDPOINT = 'v2/beers';

    private $request;

    private $httpClient;
    private $service;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->request = $this->getMockBuilder(GetBeerRequest::class)->disableOriginalConstructor()->getMock();

        $this->httpClient = new MockHttpClient(null, self::BASE_ENDPOINT);
        $this->service = new GetBeerActionService($this->httpClient);
    }


    public function testGetBeerWithIdValid() : void
    {
        $id = '10';
        $this->request->method('getId')->willReturn($id);
        $expectedResponseData = ["image_url" => "https://images.punkapi.com/v2/10.png", "tagline" => "Single Hop IPA Series - 2011.", "first_brewed" => "01/2011"];

        // Arrange
        $mockResponse = $this->getResponseBeerWithIdValid();
        $this->httpClient->setResponseFactory($mockResponse);

        // Act
        $responseData = $this->service->__invoke($this->request);

        // Assert
        self::assertSame('GET', $mockResponse->getRequestMethod());
        self::assertSame(
            \sprintf('%s/%s/%s', self::BASE_ENDPOINT, self::CURRENT_PUNK_ENDPOINT, $id),
            $mockResponse->getRequestUrl()
        );
        self::assertSame($responseData, $expectedResponseData);
    }

    public function testGetBeerWithIdInvalid() : void
    {
        $id = '1000';
        $this->request->method('getId')->willReturn($id);

        // Arrange
        $mockResponse = $this->getResponseBeerWithIdInvalid();
        $this->httpClient->setResponseFactory($mockResponse);

        // $this->expectException(NotFoundHttpException::class);

        // Act
        try{
            $responseData = $this->service->__invoke($this->request);
            self::expectErrorMessage("Required catch exception 'NotFoundHttpException' ");
        }catch (NotFoundHttpException $exception){
            self::assertSame('GET', $mockResponse->getRequestMethod());
            self::assertSame(
                \sprintf('%s/%s/%s', self::BASE_ENDPOINT, self::CURRENT_PUNK_ENDPOINT, $id),
                $mockResponse->getRequestUrl()
            );
            self::assertIsString($exception->getMessage());
        }catch (\Exception $exception){
            self::expectErrorMessage("Print other Exception");
        }
    }

    private function getResponseBeerWithIdValid() : MockResponse
    {
        $responseJson = '[{"id":10,"name":"Bramling X","tagline":"Single Hop IPA Series - 2011.","first_brewed":"01/2011","description":"Good old Bramling Cross is elegant, refined, assured, (boring) and understated. Understated that is unless you hop the living daylights out of a beer with it. This is Bramling Cross re-invented and re-imagined, and shows just what can be done with English hops if you use enough of them. Poor Bramling Cross normally gets lost in a woeful stream of conformist brown ales made by sleepy cask ale brewers. But not anymore. This beer shows that British hops do have some soul, and is a fruity riot of blackberries, pears, and plums. Reminds me of the bramble, apple and ginger jam my grandmother used to make.","image_url":"https://images.punkapi.com/v2/10.png","abv":7.5,"ibu":75,"target_fg":1013,"target_og":1068,"ebc":22,"srm":11,"ph":4.4,"attenuation_level":80.9,"volume":{"value":20,"unit":"litres"},"boil_volume":{"value":25,"unit":"litres"},"method":{"mash_temp":[{"temp":{"value":65,"unit":"celsius"},"duration":75}],"fermentation":{"temp":{"value":19,"unit":"celsius"}},"twist":null},"ingredients":{"malt":[{"name":"Extra Pale","amount":{"value":6.38,"unit":"kilograms"}},{"name":"Crystal 150","amount":{"value":0.13,"unit":"kilograms"}},{"name":"Caramalt","amount":{"value":0.25,"unit":"kilograms"}}],"hops":[{"name":"Bramling Cross","amount":{"value":60,"unit":"grams"},"add":"start","attribute":"bitter"},{"name":"Bramling Cross","amount":{"value":50,"unit":"grams"},"add":"end","attribute":"flavour"}],"yeast":"Wyeast 1056 - American Aleâ„¢"},"food_pairing":["Warm blackberry pie","Vinegar doused fish and chips","Aromatic korma curry with lemon and garlic naan"],"brewers_tips":"Getting good Bramling Cross is key. Most English hops are in leaf form (not pelletised), so getting fresh hops close to harvest (September) will give this beer the right amount of dark berry intensity.","contributed_by":"Sam Mason <samjbmason>"}]';
        return new MockResponse($responseJson, ['http_code' => 200, 'response_headers' => ['Content-Type: application/json']]);
    }

    private function getResponseBeerWithIdInvalid() : MockResponse
    {
        $responseJson = '{"statusCode":404,"error":"Not Found","message":"No beer found that matches the ID 1000"}';
        return new MockResponse($responseJson, ['http_code' => 404, 'response_headers' => ['Content-Type: application/json']]);
    }

}